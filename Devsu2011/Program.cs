using System;
using System.Collections.Generic;
using System.Linq;

namespace Devsu2011
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] values = new int[] { -3, -2, 0, 0, 5, 7, 9, 11, 11, 25 };
            Console.WriteLine("Devsu 2011 CodeJam");
            Console.WriteLine("Result 1.- " + devsuCodeJam2011_1(8, 9).ToString());
            Console.WriteLine("Result 2.- " + devsuCodeJam2011_2(2, 4).ToString());
            Console.WriteLine("Result 3.- " + devsuCodeJam2011_3(60, 3).ToString());
            Console.WriteLine("Result 4.- " + devsuCodeJam2011_4("DevsuCodeJam is just great!", "I am here! :)").ToString());
            int[] result = devsuCodeJam2011_5(values);
            Console.WriteLine("Result 5.-");
            for(int i = 0; i<result.Length;i++) { Console.Write(result[i].ToString() + " "); }
            Console.WriteLine();
            Console.WriteLine("Result 6.- " + devsuCodeJam2011_6("this is a test"));


            Console.ReadKey();
        }


        
        static int devsuCodeJam2011_1(int x, int y)
        {
            //Look at this series: 7, 6, 8, 4, 9, 2, 10, 0, 11, -2, …
            //Create a function that receives two integers: x and y.If any of them are 0 or negative, or if
            //they are greater than 255, the function should return -1
            //Otherwise, the function should return the sum of the x and y elements of the series.
            //For example: If the function receives x = 1, y = 3, it should return: 15. (Because the sum of the
            //first plus the third argument is 7 + 8 = 15).If the function receives x = 8, y = 9, it should return 11.
            //(Because the sum of the 8th plus the 9th element is 0 + 11 = 11).
            //The function will receive 2 integers, return an integer.
            int result = -1;
            if(x == 0 || y == 0 || x > 255 || y == 255 || x < 0 || y < 0)
            {
                return -1;
            }
            int[] series = serieCodeJam2011_1();
            result = series[x - 1] + series[y - 1];
            return result;
        }
        static int devsuCodeJam2011_2(int seed, int y)
        {
            //Look at this series: 2, 2, 4, 12, 48, … the seed for this series was the number 2.
            //Look at this series: 3, 3, 6, 18, 72, … the seed for this series was the number 3.
            //Create a function that receives two integers: x, and y.If any of them are 0 or negative, or if
            //they are greater than 255, the function should return -1
            //The function should return the y element of the series generated by x.
            //For example, if the series receives x = 3, y = 4, it should return 72, because 72 is the 4th
            //element of the series generated when x = 3.
            //The function will receive 2 integers, and return an integer.
            int[] serie = new int[255];
            serie[0] = seed;
            serie[1] = seed;
            for (int i = 1;i < 254; i++)
            {
                serie[i + 1] = serie[i] * (i + 1);
               // Console.WriteLine(serie[i+1].ToString() +  " = " + serie[i - 1].ToString() + " * " + (i + 1).ToString());
            }
            return serie[y];
        }
        static float devsuCodeJam2011_3(int x , int y)
        {
            //Look at this series: 60, 30, 20, 15, 12...the seed for this series was the number 60.
            //Create a function that receives two integers: x, and y.If any of them are 0 or negative, or if
            //they are greater than 255, the function should return -1.
            //The function should return the y element of the series generated by x.
            //For example: If the function receives x = 60, y = 3, it will return 20, because 20 is the 3th
            //element in the series generated when x = 60.
            //The function will receive 2 integers, return a floating point value
            int[] serie = new int[255];
            int seed = x;
            serie[0] = seed;
            int count = 1;
            for(int i = 1;i < 254; i++)
            {
                serie[i] = serie[i-1] * count / (i + 1);
                count += 1;
            }
            return serie[y - 1];
        }
        static String devsuCodeJam2011_4(String s1, String s2)
        {
            //Given two strings S1 and S2. Delete from S1 all those characters which occur in S2.Return
            //a clean S1 with the relevant characters deleted.Any character deletes both uppercase and
            //lowercase.
            //For example, given:
            //S1 = “DevsuCodeJam is just great!”
            //S2 = “I am here! :)”
            //The function should return: “DvsuCodJsjustgt”.
            //The function will receive 2 strings and return a string
            String result = "";
            for(int i = 0; i< s1.Length; i++)
            {
                String value = "";
                bool exist = false;
                for(int j = 0; j < s2.Length; j++)
                {
                    exist = s2[j].ToString().ToLower() == s1[i].ToString().ToLower();
                    value = s1[i].ToString();
                    if (exist) { break; }
                }
                if(!exist){result += value;}
            }
            return result;
        }

        static int[] devsuCodeJam2011_5(int[] array)
        {

            //Write a function to remove duplicates from a sorted array of integers. Pretty easy, right?
            //What about making it in one line of code? (You can use as many statements as needed, but
            //  the code should be written in one line).
            //Example:
            //If the function receives this array:
            //A = [-3, -2, 0, 0, 5, 7, 9, 11, 11, 25]
            //The function should return:
            //A = [-3, -2, 0, 5, 7, 9, 11, 25]
            //The function will receive an array of integers, and return an array of integers.
            int[] result = new int[array.Length]; int old = array[0]; result[0] = old;
            int j = 0;
            for(int i = 0;i< array.Length -  1; i++)
            {
               if(array[i] != array[i + 1])
                {
                    result[j++] = array[i];
                }
            }
            result[j++] = array[array.Length - 1];
            return result; 
        }

        static String devsuCodeJam2011_6(String word)
        {
            //Given a string, which contains words and spaces(no special characters), create a function
            //that return a string with the words in a reverse order.
            //Example:
            //If the function receives: “this is a test”, it should return: “test a is this”.
            //If an empty string is received, an empty string should be returned. If only one word received,
            //the same word should be returned.
            //The function will receive a string and return a string.
            String[] temp = word.Split(' ');
            String result = "";
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                result += temp[i] + " ";
            }
            return result;
        }

        static int[] serieCodeJam2011_1()
        {
            int lastpar = 8;
            int lastimpar = 6;
            int[] serie = new int[255];
            for(int i = 0;i< 255; i++)
            {
                if (i % 2 != 0)
                {
                    lastpar = lastpar - 2;
                    serie[i] = lastpar;
                }
                else { lastimpar = lastimpar + 1; serie[i] = lastimpar; }
            }
            return serie;
        }
    }
}
